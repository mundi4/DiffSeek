export const normalizedCharMap = ((normChars: (string | number)[][]) => {
	const result: Record<number, number> = {};

	function getCharCode(char: string | number): number {
		if (typeof char === "number") {
			return char;
		}
		return char.codePointAt(0)!;
	}

	for (const entry of normChars) {
		const [norm, ...variants] = entry;
		const normCharCode = getCharCode(norm);
		for (const variant of variants) {
			const variantCharCode = getCharCode(variant);
			result[variantCharCode] = normCharCode;
		}
	}
	return result;
})([
	["-", "‐", "‒", "–", "—", "―", "﹘", "－", "﹣", "─", "⸺"],
	[".", "․", "．"],
	[",", "，", "､"],
	[
		"·", "⋅", "∙", "ㆍ", "‧", "•", "●",
	],
	[
		"⊙", "◉", "◎", "⦿"
	],
	[
		"∘", "◦", "○", "ㅇ"
	],
	["■", "▪", "◼"],
	["□", "▫", "◻", "☐"],
	["…", "⋯"],
	["(", "（"],
	[")", "）"],
	["[", "［"],
	["]", "］"],
	["{", "｛"],
	["}", "｝"],
	["<", "＜"],
	[">", "＞"],
	["=", "＝", "﹦", "≡", "≈"],
	["+", "＋", "﹢"],
	["*", "＊", "✱", "×", "∗", "✕", "✖"],
	["/", "／", "÷", "∕"],
	["\\", "₩", "∖"],
	["&", "＆"],
	["#", "＃"],
	["@", "＠"],
	["$", "＄"],
	["%", "％"],
	["^", "＾"],
	["~", "～", "∼", "〜", "〰"],
	["`", "｀"],
	["|", "｜", "¦"],
	[":", "："],
	[";", "；"],
	["?", "？"],
	["!", "！"],
	["_", "＿"],
	//["°", "˚", "º"],

	// 화살표 확장
	["→", "⇒", "➡", "➔", "➝", "➞", "➟", "⟶", "⇢", "⇨", "⮕", "⭢"],
	["←", "⇐", "⬅", "⟵", "⟸", "⇇", "⇤", "⭠"],
	["↑", "⇑", "⬆", "⇧", "⮙", "⭡"],
	["↓", "⇓", "⬇", "⇩", "⮛", "⭣"],
	["↔", "⇔", "⟷", "⇄", "⇆", "⟺", "⮀", "⮂"],
	["↕", "⇕", "↨"],

	[" ", "\u00A0", "\u2000", "\u2001", "\u2002", "\u2003", "\u2004", "\u2005", "\u2006", "\u2007", "\u2008", "\u2009", "\u200A"],

	// 동아시아 인용부호
	["「", "『", "《", "〈"],
	["」", "』", "》", "〉"],
	["☞", "🖙"],

	// 서양 인용부호
	["\"", "“", "”", "〝", "〞", "‟", "″", "❝", "❞", "⹂"],
	["'", "‘", "’", "‚", "‛", "′", "❛", "❜", "Ꞌ", "ꞌ"],
]);
